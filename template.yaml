AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: API Gateway and Lambda functions along with related resources for Billing Dashboard.

Parameters:
  RedshiftUser:
    Type: String
    Default: "billing"
    Description: User Name for Redshift Cluster
  RedshiftPass:
    Type: String
    NoEcho: true
    Description: Password for Redshift Cluster. Password should be atleast 8 characters long.
  RedshiftConnectionString:
    Type: String
    Description: Connection String for Redshift Cluster if there Is an Existing Billing Redshit Database
  FederateAccount:
    Type: String
    Description: AWS Main Account Number To Federate
  FederateAccountRoleName:
    Type: String
    Default: "OrganizationAccountAccessRole"
    Description: IAM Role Name For Federation in the Federate Main Account
  MasterBillingAccount:
    Type: String
    Description: AWS Master Billing Account Number
  MasterBillingAccountRoleName:
    Type: String
    Default: "sgas_dev_admin"
    Description: IAM Role Name For Federation in the Master Billing Account
  MasterBillingAccountRoleExternalId:
    Type: String
    Description: External Id of IAM Role for Federation in the Master Billing Account
  FederationFunctionName:
    Type: String
    Description: Federation Lambda Function Name
  AlarmThresholdNumber:
    Type: Number
    Default: 10
    Description: Threshold Number for Alarms

Resources:

  EncryptionDecryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Encryption and Decryption key for Lambda"
      KeyPolicy:
        Id: "LambdaEncDec"
        Version: "2012-10-17"
        Statement:
          -
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Action:
              - "kms:*"
            Principal:
              AWS: !Ref AWS::AccountId
            Resource: '*'
          -
            Sid: "Allow Encryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Encrypt"
            Principal:
              AWS: !GetAtt LambdaFunctionIAMRole.Arn
            Resource: '*'
          -
            Sid: "Allow Decryption Service to use this key"
            Effect: "Allow"
            Action:
              - "kms:Decrypt"
            Principal:
              AWS: !GetAtt LambdaFunctionIAMRole.Arn
            Resource: '*'

  LambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "iam:*"
                  - "kms:*"
                  - "s3:*"
                  - "sts:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./swagger.yaml
      StageName: Prod
      Variables:
        LambdaFunctionName: !Ref ProxyFunction

  ProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt LambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          REDSHIFT_CONNECTION_STRING: !Ref RedshiftConnectionString
          REDSHIFT_USER: !Ref RedshiftUser
          REDSHIFT_PASS: !Ref RedshiftPass
          KMS_REGION: !Ref 'AWS::Region'
          KMS_KEY_ID: !Ref EncryptionDecryptionKey
          KMS_KEY_ARN: !GetAtt EncryptionDecryptionKey.Arn
      Events:
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  MetricsLambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudwatch:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "arn:aws:sns:*"
              -
                Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  MetricsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index_metrics.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt MetricsLambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          FEDERATE_ACCOUNT: !Ref FederateAccount
          FEDERATE_ACCOUNT_ROLE_NAME: !Ref FederateAccountRoleName
          MASTER_BILLING_ACCOUNT: !Ref MasterBillingAccount
          MASTER_BILLING_ACCOUNT_ROLE_NAME: !Ref MasterBillingAccountRoleName
          MASTER_BILLING_ACCOUNT_ROLE_EXTERNAL_ID: !Ref MasterBillingAccountRoleExternalId
          FEDERATION_FUNCTION_NAME: !Ref FederationFunctionName
          THRESHOLD_FOR_ALARMS: !Ref AlarmThresholdNumber
          TOPIC_ARN_FOR_ALARMS: !Ref Topic
      Events:
        Scheduler:
          Type: Schedule
          Properties:
            Schedule: rate(5 minutes)

  AlertLambdaFunctionIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        -
          PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "cloudwatch:*"
                Resource: "*"
              -
                Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "arn:aws:sns:*"
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                Resource: "arn:aws:dynamodb:*"
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  AlertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index_alert.handler
      Runtime: nodejs4.3
      CodeUri: ./src
      Role: !GetAtt AlertLambdaFunctionIAMRole.Arn
      Timeout: 300
      Environment:
        Variables:
          REDSHIFT_CONNECTION_STRING: !Ref RedshiftConnectionString
          REDSHIFT_USER: !Ref RedshiftUser
          REDSHIFT_PASS: !Ref RedshiftPass
          KMS_REGION: !Ref 'AWS::Region'
          KMS_KEY_ID: !Ref EncryptionDecryptionKey
          KMS_KEY_ARN: !GetAtt EncryptionDecryptionKey.Arn
      Events:
        Scheduler:
          Type: SNS
          Properties:
            Topic: !Ref Topic

  Topic:
    Type: AWS::SNS::Topic

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/Prod'
  ProxyLambdaFunctionArn:
    Description: "Proxy Lambda Function ARN"
    Value: !GetAtt ProxyFunction.Arn
  MetricsLambdaFunctionArn:
    Description: "Metrics Lambda Function ARN"
    Value: !GetAtt MetricsFunction.Arn
  AlertLambdaFunctionArn:
    Description: "Alert Lambda Function ARN"
    Value: !GetAtt AlertFunction.Arn
  EncryptionDecryptionKeyId:
    Description: "Encryption Decryption KMS Key Id"
    Value: !Ref EncryptionDecryptionKey
  TopicArn:
    Description: "SNS Topic Arn for Over Increased Percent"
    Value: !Ref Topic
